'use strict';

const cacheName = '{{ cache_name|raw }}';
const startPage = '{{ start_page|raw }}';
const offlinePage = '{{ offline_page|raw }}';
const filesToCache = [startPage, offlinePage];
const neverCacheUrls = [/\/wp-admin/, /\/wp-login/, /\/panel/, /preview=true/];

// Install
self.addEventListener('install', function (e) {

    self.skipWaiting();

    console.log('PWA service worker installation');
    e.waitUntil(
        caches.open(cacheName).then(function (cache) {
            console.log('PWA service worker caching dependencies');
            filesToCache.map(function (url) {
                return cache.add(url).catch(function (reason) {
                    return console.log('PWA: ' + String(reason) + ' ' + url);
                });
            });
        })
    );
});

// Activate
self.addEventListener('activate', function (e) {

    console.log('PWA service worker activation');

    e.waitUntil(
        caches.keys().then(function (keyList) {
            return Promise.all(keyList.map(function (key) {
                if (key !== cacheName) {
                    console.log('PWA old cache removed', key);
                    return caches.delete(key);
                }
            }));
        })
    );

    return self.clients.claim();
});

// Fetch
self.addEventListener('fetch', function (e) {

    let url = e.request.url;
    // Return if the current request url is in the never cache list
    if (!neverCacheUrls.every(checkNeverCacheList, url)) {
        // console.log('PWA: Current request is excluded from cache because it\'s for backend: ' + url);
        return;
    }

    // Return if request url protocal isn't http or https
    if (!url.match(/^(http|https):\/\//i)) {
        // console.log('PWA: Current request is excluded from cache because sames not https or http: ' + url);
        return;
    }

    // Return if request url is from an external domain.
    if (new URL(url).origin !== location.origin) {
        // console.log('PWA: Current request is excluded from cache because it\'s from external domain: ' + url);
        return;
    }

    // For POST requests, do not use the cache. Serve offline page if offline.
    if (e.request.method !== 'GET') {
        e.respondWith(
            fetch(e.request).catch(function () {
                return caches.match(offlinePage);
            })
        );
        return;
    }

    // Revving strategy
    if (e.request.mode === 'navigate' && navigator.onLine) {
        e.respondWith(
            fetch(e.request).then(function (response) {
                return caches.open(cacheName).then(function (cache) {
                    cache.put(e.request, response.clone());
                    return response;
                });
            })
        );
        return;
    }

    e.respondWith(
        caches.match(e.request).then(function (response) {

            return response || fetch(e.request).then(function (response) {
                return caches.open(cacheName).then(function (cache) {
                    cache.put(e.request, response.clone());
                    return response;
                });
            });
        }).catch(function () {

            return caches.match(offlinePage);
        })
    );
});

// Check if current url is in the neverCacheUrls list
function checkNeverCacheList(url) {
    return !this.match(url);
}
